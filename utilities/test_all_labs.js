#!/usr/bin/env mongosh

print("üß™ COMPREHENSIVE LABS 1-13 VALIDATION - EVERY COMMAND");
print("=" .repeat(80));

var totalCommands = 0;
var passedCommands = 0;
var failedCommands = 0;
var errors = [];

// Load data
try {
    load("data/comprehensive_data_loader.js");
    print("‚úÖ Data loaded");
} catch (e) {
    print("‚ùå Data load failed: " + e.message);
}

// Clean test collections
db = db.getSiblingDB('insurance_company');
db.lab3_test_policies.drop();
db.lab3_test_customers.drop();
db.lab3_test_claims.drop();
print("‚úÖ Test collections cleaned");

// LAB 1: MongoDB Shell Mastery
print("\nüî¨ TESTING LAB 1: MongoDB Shell Mastery");
totalCommands++; try { var result1 = db.version(); print("‚úÖ MongoDB version"); passedCommands++; } catch (error) { print("‚ùå MongoDB version - ERROR: " + error.message); errors.push("Lab1 version: " + error.message); failedCommands++; }
totalCommands++; try { var result2 = db.runCommand({buildInfo: 1}); print("‚úÖ Build info"); passedCommands++; } catch (error) { print("‚ùå Build info - ERROR: " + error.message); errors.push("Lab1 buildInfo: " + error.message); failedCommands++; }
totalCommands++; try { var result3 = db; print("‚úÖ Current database"); passedCommands++; } catch (error) { print("‚ùå Current database - ERROR: " + error.message); errors.push("Lab1 db: " + error.message); failedCommands++; }
totalCommands++; try { var result4 = db.serverStatus(); print("‚úÖ Server status"); passedCommands++; } catch (error) { print("‚ùå Server status - ERROR: " + error.message); errors.push("Lab1 serverStatus: " + error.message); failedCommands++; }
totalCommands++; try { var result5 = db.runCommand({connectionStatus: 1}); print("‚úÖ Connection status"); passedCommands++; } catch (error) { print("‚ùå Connection status - ERROR: " + error.message); errors.push("Lab1 connectionStatus: " + error.message); failedCommands++; }
totalCommands++; try { var result6 = db.adminCommand({listDatabases: 1}); print("‚úÖ List databases"); passedCommands++; } catch (error) { print("‚ùå List databases - ERROR: " + error.message); errors.push("Lab1 listDatabases: " + error.message); failedCommands++; }
totalCommands++; try { var result7 = db.stats(); print("‚úÖ Database stats"); passedCommands++; } catch (error) { print("‚ùå Database stats - ERROR: " + error.message); errors.push("Lab1 stats: " + error.message); failedCommands++; }
totalCommands++; try { var result8 = db.getName(); print("‚úÖ Database name"); passedCommands++; } catch (error) { print("‚ùå Database name - ERROR: " + error.message); errors.push("Lab1 getName: " + error.message); failedCommands++; }
totalCommands++; try { db = db.getSiblingDB('insurance_company'); print("‚úÖ Switch to insurance_company"); passedCommands++; } catch (error) { print("‚ùå Switch to insurance_company - ERROR: " + error.message); errors.push("Lab1 use: " + error.message); failedCommands++; }
totalCommands++; try { var result9 = db.runCommand("listCollections").cursor.firstBatch.map(c => c.name); print("‚úÖ List collections"); passedCommands++; } catch (error) { print("‚ùå List collections - ERROR: " + error.message); errors.push("Lab1 listCollections: " + error.message); failedCommands++; }
totalCommands++; try { var result10 = db.createCollection("policies"); print("‚úÖ Create collection"); passedCommands++; } catch (error) { print("‚ùå Create collection - ERROR: " + error.message); errors.push("Lab1 createCollection: " + error.message); failedCommands++; }
totalCommands++; try { var result11 = db.policies.getIndexes(); print("‚úÖ Get indexes"); passedCommands++; } catch (error) { print("‚ùå Get indexes - ERROR: " + error.message); errors.push("Lab1 getIndexes: " + error.message); failedCommands++; }
totalCommands++; try { var result12 = db.runCommand({ping: 1}); print("‚úÖ Ping command"); passedCommands++; } catch (error) { print("‚ùå Ping command - ERROR: " + error.message); errors.push("Lab1 ping: " + error.message); failedCommands++; }
totalCommands++; try { var result13 = db.getProfilingStatus(); print("‚úÖ Profiling status"); passedCommands++; } catch (error) { print("‚ùå Profiling status - ERROR: " + error.message); errors.push("Lab1 getProfilingStatus: " + error.message); failedCommands++; }
totalCommands++; try { var result14 = db.currentOp(); print("‚úÖ Current operations"); passedCommands++; } catch (error) { print("‚ùå Current operations - ERROR: " + error.message); errors.push("Lab1 currentOp: " + error.message); failedCommands++; }

// LAB 2: Database Management
print("\nüî¨ TESTING LAB 2: Database Management");
totalCommands++; try { var result15 = db.stats(); print("‚úÖ Database statistics"); passedCommands++; } catch (error) { print("‚ùå Database statistics - ERROR: " + error.message); errors.push("Lab2 stats: " + error.message); failedCommands++; }
totalCommands++; try { var result16 = db.stats(1024); print("‚úÖ Database stats KB"); passedCommands++; } catch (error) { print("‚ùå Database stats KB - ERROR: " + error.message); errors.push("Lab2 stats KB: " + error.message); failedCommands++; }
totalCommands++; try { var result17 = db.runCommand({dbStats: 1, scale: 1024}); print("‚úÖ DB stats command"); passedCommands++; } catch (error) { print("‚ùå DB stats command - ERROR: " + error.message); errors.push("Lab2 dbStats: " + error.message); failedCommands++; }
totalCommands++; try { var result18 = db.createCollection("lab2_customers"); print("‚úÖ Create lab2 customers"); passedCommands++; } catch (error) { print("‚ùå Create lab2 customers - ERROR: " + error.message); errors.push("Lab2 createCollection: " + error.message); failedCommands++; }
totalCommands++; try { var result19 = db.createCollection("audit_logs", {capped: true, size: 1000000, max: 5000}); print("‚úÖ Create capped collection"); passedCommands++; } catch (error) { print("‚ùå Create capped collection - ERROR: " + error.message); errors.push("Lab2 capped: " + error.message); failedCommands++; }
totalCommands++; try { var result20 = db.customers.stats(); print("‚úÖ Collection stats"); passedCommands++; } catch (error) { print("‚ùå Collection stats - ERROR: " + error.message); errors.push("Lab2 collection stats: " + error.message); failedCommands++; }
totalCommands++; try { var result21 = db.audit_logs.isCapped(); print("‚úÖ Check capped"); passedCommands++; } catch (error) { print("‚ùå Check capped - ERROR: " + error.message); errors.push("Lab2 isCapped: " + error.message); failedCommands++; }

// LAB 3: CRUD Create/Insert
print("\nüî¨ TESTING LAB 3: CRUD Create/Insert");
totalCommands++; try { var result22 = db.lab3_test_policies.insertOne({policyNumber: "POL-AUTO-001", premiumAmount: 899.99, policyType: "Auto"}); print("‚úÖ Insert basic policy"); passedCommands++; } catch (error) { print("‚ùå Insert basic policy - ERROR: " + error.message); errors.push("Lab3 basic insertOne: " + error.message); failedCommands++; }
totalCommands++; try { var result23 = db.lab3_test_policies.insertOne({_id: "POL-HOME-001", policyNumber: "POL-HOME-001", premiumAmount: 1299.99, policyType: "Home", insuranceCarrier: "SafeGuard Insurance"}); print("‚úÖ Insert with custom ID"); passedCommands++; } catch (error) { print("‚ùå Insert with custom ID - ERROR: " + error.message); errors.push("Lab3 custom ID: " + error.message); failedCommands++; }
totalCommands++; try { var result24 = db.lab3_test_policies.insertOne({policyNumber: "POL-LIFE-001", premiumAmount: 2499.99, policyType: "Life", coverage: {deathBenefit: 500000, termLength: "20 years", cashValue: true}, beneficiaries: ["spouse", "children", "trust"], active: true, createdAt: new Date()}); print("‚úÖ Insert complex nested policy"); passedCommands++; } catch (error) { print("‚ùå Insert complex nested policy - ERROR: " + error.message); errors.push("Lab3 nested: " + error.message); failedCommands++; }
totalCommands++; try { var newId = new ObjectId(); print("‚úÖ Generate ObjectId"); passedCommands++; } catch (error) { print("‚ùå Generate ObjectId - ERROR: " + error.message); errors.push("Lab3 ObjectId: " + error.message); failedCommands++; }
totalCommands++; try { var customId = new ObjectId(); var result25 = db.lab3_test_policies.insertOne({_id: customId, policyType: "Commercial", policyNumber: "POL-COM-001", premiumAmount: 4999.99}); print("‚úÖ Insert with generated ObjectId"); passedCommands++; } catch (error) { print("‚ùå Insert with generated ObjectId - ERROR: " + error.message); errors.push("Lab3 generated ID: " + error.message); failedCommands++; }
totalCommands++; try { var result26 = db.lab3_test_customers.insertMany([{customerId: "CUST-TEST-001", name: "John Doe", email: "john@example.com", age: 30, city: "New York", customerType: "Individual"}, {customerId: "CUST-TEST-002", name: "Jane Smith", email: "jane@example.com", age: 25, city: "Los Angeles", customerType: "Individual"}, {customerId: "CUST-TEST-003", name: "ABC Corporation", email: "contact@abccorp.com", businessType: "Manufacturing", city: "Chicago", customerType: "Business"}]); print("‚úÖ Insert many customers"); passedCommands++; } catch (error) { print("‚ùå Insert many customers - ERROR: " + error.message); errors.push("Lab3 insertMany: " + error.message); failedCommands++; }
totalCommands++; try { var result27 = db.lab3_test_claims.insertMany([{claimNumber: "CLM-001", policyId: "POL-AUTO-001", claimAmount: 3500.00}, {claimNumber: "CLM-002", policyId: "POL-HOME-001", claimAmount: 8750.00}, {claimNumber: "CLM-003", policyId: "POL-AUTO-001", claimAmount: 1250.00}], {ordered: true}); print("‚úÖ Insert ordered claims"); passedCommands++; } catch (error) { print("‚ùå Insert ordered claims - ERROR: " + error.message); errors.push("Lab3 ordered: " + error.message); failedCommands++; }
totalCommands++; try { var result28 = db.lab3_test_claims.insertMany([{claimNumber: "CLM-004", policyId: "POL-LIFE-001", claimAmount: 15000.00}, {claimNumber: "CLM-005", policyId: "POL-HOME-001", claimAmount: 4500.00}], {ordered: false}); print("‚úÖ Insert unordered claims"); passedCommands++; } catch (error) { print("‚ùå Insert unordered claims - ERROR: " + error.message); errors.push("Lab3 unordered: " + error.message); failedCommands++; }
totalCommands++; try { var result29 = db.lab3_test_policies.insertOne({policyNumber: "POL-ACK-001", premiumAmount: 1599.99, policyType: "Auto"}, {writeConcern: {w: 1, j: true}}); print("‚úÖ Insert with write concern"); passedCommands++; } catch (error) { print("‚ùå Insert with write concern - ERROR: " + error.message); errors.push("Lab3 writeConcern: " + error.message); failedCommands++; }
totalCommands++; try { var result30 = db.lab3_test_policies.insertMany([{policyNumber: "POL-BATCH-001", premiumAmount: 899.99, policyType: "Home"}, {policyNumber: "POL-BATCH-002", premiumAmount: 1199.99, policyType: "Auto"}], {writeConcern: {w: "majority"}}); print("‚úÖ Bulk insert with majority write concern"); passedCommands++; } catch (error) { print("‚ùå Bulk insert with majority write concern - ERROR: " + error.message); errors.push("Lab3 majority: " + error.message); failedCommands++; }
totalCommands++; try { var result31 = db.lab3_test_policies.countDocuments(); print("‚úÖ Count documents after inserts"); passedCommands++; } catch (error) { print("‚ùå Count documents after inserts - ERROR: " + error.message); errors.push("Lab3 count: " + error.message); failedCommands++; }

// LAB 4: CRUD Read/Query
print("\nüî¨ TESTING LAB 4: CRUD Read/Query");
totalCommands++; try { var result32 = db.policies.find(); print("‚úÖ Find all policies"); passedCommands++; } catch (error) { print("‚ùå Find all policies - ERROR: " + error.message); errors.push("Lab4 find: " + error.message); failedCommands++; }
totalCommands++; try { var result33 = db.policies.findOne(); print("‚úÖ Find one policy"); passedCommands++; } catch (error) { print("‚ùå Find one policy - ERROR: " + error.message); errors.push("Lab4 findOne: " + error.message); failedCommands++; }
totalCommands++; try { var result34 = db.policies.find({policyType: "Auto"}); print("‚úÖ Find by type"); passedCommands++; } catch (error) { print("‚ùå Find by type - ERROR: " + error.message); errors.push("Lab4 filter: " + error.message); failedCommands++; }
totalCommands++; try { var result35 = db.policies.find({premiumAmount: {$gt: 1000}}); print("‚úÖ Range query"); passedCommands++; } catch (error) { print("‚ùå Range query - ERROR: " + error.message); errors.push("Lab4 range: " + error.message); failedCommands++; }
totalCommands++; try { var result36 = db.policies.find({}, {policyNumber: 1, premiumAmount: 1}); print("‚úÖ Projection query"); passedCommands++; } catch (error) { print("‚ùå Projection query - ERROR: " + error.message); errors.push("Lab4 projection: " + error.message); failedCommands++; }
totalCommands++; try { var result37 = db.policies.find().sort({premiumAmount: -1}); print("‚úÖ Sort query"); passedCommands++; } catch (error) { print("‚ùå Sort query - ERROR: " + error.message); errors.push("Lab4 sort: " + error.message); failedCommands++; }
totalCommands++; try { var result38 = db.policies.find().limit(5); print("‚úÖ Limit query"); passedCommands++; } catch (error) { print("‚ùå Limit query - ERROR: " + error.message); errors.push("Lab4 limit: " + error.message); failedCommands++; }
totalCommands++; try { var result39 = db.policies.countDocuments(); print("‚úÖ Count documents"); passedCommands++; } catch (error) { print("‚ùå Count documents - ERROR: " + error.message); errors.push("Lab4 count: " + error.message); failedCommands++; }

// LAB 5: CRUD Update/Delete
print("\nüî¨ TESTING LAB 5: CRUD Update/Delete");
totalCommands++; try { var result40 = db.policies.updateOne({policyNumber: "POL-AUTO-001"}, {$set: {premiumAmount: 949.99}}); print("‚úÖ Update one policy"); passedCommands++; } catch (error) { print("‚ùå Update one policy - ERROR: " + error.message); errors.push("Lab5 updateOne: " + error.message); failedCommands++; }
totalCommands++; try { var verifyResult40 = db.policies.findOne({policyNumber: "POL-AUTO-001"}, {premiumAmount: 1}); print("‚úÖ Verify update worked"); passedCommands++; } catch (error) { print("‚ùå Verify update worked - ERROR: " + error.message); errors.push("Lab5 verifyUpdate: " + error.message); failedCommands++; }
totalCommands++; try { var result41 = db.policies.updateMany({policyType: "Auto"}, {$set: {featured: false}}); print("‚úÖ Update many policies"); passedCommands++; } catch (error) { print("‚ùå Update many policies - ERROR: " + error.message); errors.push("Lab5 updateMany: " + error.message); failedCommands++; }
totalCommands++; try { var verifyResult41 = db.policies.find({policyType: "Auto"}, {featured: 1}).limit(3).toArray(); print("‚úÖ Verify bulk update"); passedCommands++; } catch (error) { print("‚ùå Verify bulk update - ERROR: " + error.message); errors.push("Lab5 verifyBulkUpdate: " + error.message); failedCommands++; }
totalCommands++; try { var result41b = db.policies.updateMany({policyType: "Auto"}, {$mul: {premiumAmount: 0.95}}); print("‚úÖ Apply 5% discount"); passedCommands++; } catch (error) { print("‚ùå Apply 5% discount - ERROR: " + error.message); errors.push("Lab5 discount: " + error.message); failedCommands++; }
totalCommands++; try { var verifyDiscount = db.policies.find({policyType: "Auto"}, {policyNumber: 1, premiumAmount: 1}).limit(3).toArray(); print("‚úÖ Verify 5% discount applied"); passedCommands++; } catch (error) { print("‚ùå Verify 5% discount applied - ERROR: " + error.message); errors.push("Lab5 verifyDiscount: " + error.message); failedCommands++; }
totalCommands++; try { var result42 = db.policies.updateOne({policyNumber: "POL-NEW-001"}, {$set: {customerName: "New Customer", premiumAmount: 1599.99}}, {upsert: true}); print("‚úÖ Upsert operation"); passedCommands++; } catch (error) { print("‚ùå Upsert operation - ERROR: " + error.message); errors.push("Lab5 upsert: " + error.message); failedCommands++; }
totalCommands++; try { var verifyUpsert = db.policies.findOne({policyNumber: "POL-NEW-001"}); print("‚úÖ Verify upsert created document"); passedCommands++; } catch (error) { print("‚ùå Verify upsert created document - ERROR: " + error.message); errors.push("Lab5 verifyUpsert: " + error.message); failedCommands++; }
totalCommands++; try { var result43 = db.policies.deleteOne({premiumAmount: {$lt: 100}}); print("‚úÖ Delete one policy"); passedCommands++; } catch (error) { print("‚ùå Delete one policy - ERROR: " + error.message); errors.push("Lab5 deleteOne: " + error.message); failedCommands++; }
totalCommands++; try { var verifyDelete = db.policies.countDocuments({premiumAmount: {$lt: 100}}); print("‚úÖ Verify deletion worked"); passedCommands++; } catch (error) { print("‚ùå Verify deletion worked - ERROR: " + error.message); errors.push("Lab5 verifyDelete: " + error.message); failedCommands++; }
totalCommands++; try { var result44 = db.policies.deleteMany({policyType: "Discontinued", active: false}); print("‚úÖ Delete many policies"); passedCommands++; } catch (error) { print("‚ùå Delete many policies - ERROR: " + error.message); errors.push("Lab5 deleteMany: " + error.message); failedCommands++; }

// LAB 6: Advanced Query Techniques
print("\nüî¨ TESTING LAB 6: Advanced Query Techniques");
totalCommands++; try { db = db.getSiblingDB('insurance_analytics'); var result45 = db.policies.find({$and: [{annualPremium: {$gt: 500}}, {$or: [{policyType: "HOME"}, {policyType: "AUTO"}]}]}); print("‚úÖ Complex AND/OR query"); passedCommands++; } catch (error) { print("‚ùå Complex AND/OR query - ERROR: " + error.message); errors.push("Lab6 complex: " + error.message); failedCommands++; }
totalCommands++; try { var result46 = db.claims.find({severityLevel: {$in: ["major", "moderate", "critical"]}}); print("‚úÖ Array element matching"); passedCommands++; } catch (error) { print("‚ùå Array element matching - ERROR: " + error.message); errors.push("Lab6 elemMatch: " + error.message); failedCommands++; }
totalCommands++; try { var result47 = db.policies.find({createdAt: {$gte: new Date("2024-01-01"), $lt: new Date("2025-01-01")}}); print("‚úÖ Date range query"); passedCommands++; } catch (error) { print("‚ùå Date range query - ERROR: " + error.message); errors.push("Lab6 dateRange: " + error.message); failedCommands++; }
totalCommands++; try { var result48 = db.customers.find({phone: /^\+1-555-/}); print("‚úÖ Regex pattern matching"); passedCommands++; } catch (error) { print("‚ùå Regex pattern matching - ERROR: " + error.message); errors.push("Lab6 regex: " + error.message); failedCommands++; }
totalCommands++; try { db.claims.createIndex({location: "2dsphere"}); print("‚úÖ Create 2dsphere index"); passedCommands++; } catch (error) { print("‚ùå Create 2dsphere index - ERROR: " + error.message); errors.push("Lab6 geoIndex: " + error.message); failedCommands++; }
totalCommands++; try { var result49 = db.claims.find({location: {$near: {$geometry: {type: "Point", coordinates: [-73.9857, 40.7484]}, $maxDistance: 50000}}}); print("‚úÖ Geospatial near query"); passedCommands++; } catch (error) { print("‚ùå Geospatial near query - ERROR: " + error.message); errors.push("Lab6 geoNear: " + error.message); failedCommands++; }
totalCommands++; try { var result50 = db.claims.find({location: {$geoWithin: {$geometry: {type: "Polygon", coordinates: [[[-74.5, 40.4], [-73.7, 40.4], [-73.7, 40.9], [-74.5, 40.9], [-74.5, 40.4]]]}}}}); print("‚úÖ Geospatial polygon query"); passedCommands++; } catch (error) { print("‚ùå Geospatial polygon query - ERROR: " + error.message); errors.push("Lab6 geoPoly: " + error.message); failedCommands++; }
totalCommands++; try { db.reviews.createIndex({reviewText: "text", categories: "text"}); var result51 = db.reviews.find({$text: {$search: "service excellent customer"}}); print("‚úÖ Text search query"); passedCommands++; } catch (error) { print("‚ùå Text search query - ERROR: " + error.message); errors.push("Lab6 textSearch: " + error.message); failedCommands++; }
totalCommands++; try { var result52 = db.claims.find({location: {$near: {$geometry: {type: "Point", coordinates: [-73.9857, 40.7484]}, $maxDistance: 50000}}}).explain("executionStats"); print("‚úÖ Geo index verification"); passedCommands++; } catch (error) { print("‚ùå Geo index verification - ERROR: " + error.message); errors.push("Lab6 geoVerify: " + error.message); failedCommands++; }
totalCommands++; try { var result53 = db.claims.find({status: "approved"}).explain("executionStats"); print("‚úÖ Performance metrics query"); passedCommands++; } catch (error) { print("‚ùå Performance metrics query - ERROR: " + error.message); errors.push("Lab6 perfMetrics: " + error.message); failedCommands++; }

// LAB 7: Aggregation Framework
print("\nüî¨ TESTING LAB 7: Aggregation Framework");
totalCommands++; try { var result54 = db.policies.aggregate([{$group: {_id: "$policyType", count: {$sum: 1}}}, {$sort: {count: -1}}]); print("‚úÖ Count policies by type"); passedCommands++; } catch (error) { print("‚ùå Count policies by type - ERROR: " + error.message); errors.push("Lab7 policyCount: " + error.message); failedCommands++; }
totalCommands++; try { var result55 = db.policies.aggregate([{$match: {isActive: true}}, {$group: {_id: "$agentId", totalRevenue: {$sum: "$annualPremium"}, policyCount: {$sum: 1}}}, {$sort: {totalRevenue: -1}}]); print("‚úÖ Revenue analysis by agent"); passedCommands++; } catch (error) { print("‚ùå Revenue analysis by agent - ERROR: " + error.message); errors.push("Lab7 agentRevenue: " + error.message); failedCommands++; }
totalCommands++; try { var result56 = db.claims.aggregate([{$match: {status: "approved"}}, {$group: {_id: {year: {$year: "$createdAt"}, month: {$month: "$createdAt"}}, averageClaimAmount: {$avg: "$claimAmount"}, totalClaims: {$sum: 1}}}, {$sort: {"_id.year": 1, "_id.month": 1}}]); print("‚úÖ Claims analysis by month"); passedCommands++; } catch (error) { print("‚ùå Claims analysis by month - ERROR: " + error.message); errors.push("Lab7 claimsMonth: " + error.message); failedCommands++; }
totalCommands++; try { var result57 = db.policies.aggregate([{$lookup: {from: "customers", localField: "customerId", foreignField: "customerId", as: "customerInfo"}}, {$unwind: "$customerInfo"}, {$project: {policyNumber: 1, policyType: 1, annualPremium: 1, "customerInfo.firstName": 1, "customerInfo.lastName": 1, "customerInfo.email": 1}}]); print("‚úÖ Join policies with customers"); passedCommands++; } catch (error) { print("‚ùå Join policies with customers - ERROR: " + error.message); errors.push("Lab7 policyCustomers: " + error.message); failedCommands++; }
totalCommands++; try { var result58 = db.customers.aggregate([{$lookup: {from: "claims", localField: "customerId", foreignField: "customerId", as: "claims"}}, {$lookup: {from: "policies", localField: "customerId", foreignField: "customerId", as: "policies"}}, {$project: {firstName: 1, lastName: 1, email: 1, totalClaims: {$size: "$claims"}, totalPolicies: {$size: "$policies"}, claimsRatio: {$cond: {if: {$gt: [{$size: "$policies"}, 0]}, then: {$divide: [{$size: "$claims"}, {$size: "$policies"}]}, else: 0}}, riskLevel: {$switch: {branches: [{case: {$gte: [{$divide: [{$size: "$claims"}, {$size: "$policies"}]}, 0.5]}, then: "High"}, {case: {$gte: [{$divide: [{$size: "$claims"}, {$size: "$policies"}]}, 0.2]}, then: "Medium"}], default: "Low"}}}}]); print("‚úÖ Customer risk profile analysis"); passedCommands++; } catch (error) { print("‚ùå Customer risk profile analysis - ERROR: " + error.message); errors.push("Lab7 customerRisk: " + error.message); failedCommands++; }
totalCommands++; try { var result59 = db.policies.aggregate([{$unwind: "$coverageTypes"}, {$group: {_id: "$coverageTypes", count: {$sum: 1}, averagePremium: {$avg: "$annualPremium"}}}, {$sort: {count: -1}}]); print("‚úÖ Coverage types analysis"); passedCommands++; } catch (error) { print("‚ùå Coverage types analysis - ERROR: " + error.message); errors.push("Lab7 coverageTypes: " + error.message); failedCommands++; }
totalCommands++; try { var result60 = db.policies.aggregate([{$match: {policyType: "AUTO"}}, {$count: "autoCount"}]); print("‚úÖ Auto policy verification"); passedCommands++; } catch (error) { print("‚ùå Auto policy verification - ERROR: " + error.message); errors.push("Lab7 autoVerify: " + error.message); failedCommands++; }
totalCommands++; try { var result61 = db.policies.aggregate([{$lookup: {from: "claims", localField: "policyNumber", foreignField: "policyNumber", as: "claims"}}, {$lookup: {from: "customers", localField: "customerId", foreignField: "customerId", as: "customer"}}, {$unwind: "$customer"}, {$group: {_id: "$policyType", totalPolicies: {$sum: 1}, totalPremiumRevenue: {$sum: "$annualPremium"}, totalClaimsAmount: {$sum: {$sum: "$claims.claimAmount"}}, averagePremium: {$avg: "$annualPremium"}, claimsCount: {$sum: {$size: "$claims"}}}}, {$project: {_id: 1, totalPolicies: 1, totalPremiumRevenue: {$round: ["$totalPremiumRevenue", 2]}, totalClaimsAmount: {$round: ["$totalClaimsAmount", 2]}, averagePremium: {$round: ["$averagePremium", 2]}, claimsCount: 1, lossRatio: {$cond: {if: {$gt: ["$totalPremiumRevenue", 0]}, then: {$round: [{$divide: ["$totalClaimsAmount", "$totalPremiumRevenue"]}, 4]}, else: 0}}, profitability: {$cond: {if: {$and: [{$gt: ["$totalPremiumRevenue", 0]}, {$lt: [{$divide: ["$totalClaimsAmount", "$totalPremiumRevenue"]}, 0.8]}]}, then: "Profitable", else: "Review Required"}}}}, {$sort: {lossRatio: 1}}]); print("‚úÖ Comprehensive business dashboard"); passedCommands++; } catch (error) { print("‚ùå Comprehensive business dashboard - ERROR: " + error.message); errors.push("Lab7 businessDashboard: " + error.message); failedCommands++; }

// LAB 8: Indexing
print("\nüî¨ TESTING LAB 8: Indexing");
totalCommands++; try { db = db.getSiblingDB('insurance_company'); var result61_idx = db.policies.getIndexes(); print("‚úÖ Examine policies indexes"); passedCommands++; } catch (error) { print("‚ùå Examine policies indexes - ERROR: " + error.message); errors.push("Lab8 policiesIndexes: " + error.message); failedCommands++; }
totalCommands++; try { var result61 = db.customers.getIndexes(); print("‚úÖ Examine customers indexes"); passedCommands++; } catch (error) { print("‚ùå Examine customers indexes - ERROR: " + error.message); errors.push("Lab8 customersIndexes: " + error.message); failedCommands++; }
totalCommands++; try { var result62 = db.claims.getIndexes(); print("‚úÖ Examine claims indexes"); passedCommands++; } catch (error) { print("‚ùå Examine claims indexes - ERROR: " + error.message); errors.push("Lab8 claimsIndexes: " + error.message); failedCommands++; }
totalCommands++; try { var result63 = db.claims.createIndex({policyId: 1, status: 1, filedDate: -1}); print("‚úÖ Create compound index"); passedCommands++; } catch (error) { print("‚ùå Create compound index - ERROR: " + error.message); errors.push("Lab8 compoundIndex: " + error.message); failedCommands++; }
totalCommands++; try { db.test_policies.drop(); db.test_policies.insertMany([{policyType: "Auto", coverageDescription: "test coverage", coverageTypes: ["collision", "comprehensive"]}]); var result64 = db.test_policies.createIndex({policyType: "text", coverageDescription: "text", coverageTypes: "text"}, {weights: {policyType: 10, coverageDescription: 5, coverageTypes: 1}, name: "policy_text_index"}); print("‚úÖ Create text index with weights"); passedCommands++; } catch (error) { print("‚ùå Create text index with weights - ERROR: " + error.message); errors.push("Lab8 textIndex: " + error.message); failedCommands++; }
totalCommands++; try { var result65 = db.policies.createIndex({policyType: 1, annualPremium: 1}, {partialFilterExpression: {status: "active"}}); print("‚úÖ Create partial index"); passedCommands++; } catch (error) { print("‚ùå Create partial index - ERROR: " + error.message); errors.push("Lab8 partialIndex: " + error.message); failedCommands++; }
totalCommands++; try { db.test_claims.drop(); db.test_claims.insertMany([{claimNumber: "CLM-TEST-001", policyId: "pol1", claimAmount: 1500}, {claimNumber: "CLM-TEST-002", policyId: "pol2", claimAmount: 2500}, {claimNumber: "CLM-TEST-003", policyId: "pol1", claimAmount: 3500}]); var result66 = db.test_claims.find({policyId: "pol1"}).explain("executionStats"); print("‚úÖ Performance test before index"); passedCommands++; } catch (error) { print("‚ùå Performance test before index - ERROR: " + error.message); errors.push("Lab8 perfBefore: " + error.message); failedCommands++; }
totalCommands++; try { var result67 = db.test_claims.createIndex({policyId: 1}); var result68 = db.test_claims.find({policyId: "pol1"}).explain("executionStats"); print("‚úÖ Performance test after index"); passedCommands++; } catch (error) { print("‚ùå Performance test after index - ERROR: " + error.message); errors.push("Lab8 perfAfter: " + error.message); failedCommands++; }
totalCommands++; try { db.test_policies.drop(); db.test_policies.insertMany([{policyType: "Auto", annualPremium: 1200, policyNumber: "POL-001"}, {policyType: "Home", annualPremium: 1800, policyNumber: "POL-002"}, {policyType: "Auto", annualPremium: 2500, policyNumber: "POL-003"}]); var result69 = db.test_policies.createIndex({policyType: 1}); var result70 = db.test_policies.createIndex({annualPremium: 1}); print("‚úÖ Index intersection test"); passedCommands++; } catch (error) { print("‚ùå Index intersection test - ERROR: " + error.message); errors.push("Lab8 indexIntersection: " + error.message); failedCommands++; }

// LAB 9: Data Modeling
print("\nüî¨ TESTING LAB 9: Data Modeling");
totalCommands++; try { var result77 = db.lab9_claims.insertOne({_id: ObjectId(), claimNumber: "CLM-2024-001234", policyId: ObjectId(), incidentDescription: "Vehicle collision at intersection", adjuster: {_id: ObjectId(), name: "Sarah Johnson", email: "sarah.johnson@insuranceco.com", licenseNumber: "ADJ-5678"}, incidentTypes: ["collision", "property damage", "injury"], investigationNotes: [{_id: ObjectId(), investigator: "Mike Thompson", note: "Photos taken, police report obtained", createdAt: new Date()}], filedAt: new Date(), estimatedAmount: 8500}); print("‚úÖ Insurance claims schema with embedded data"); passedCommands++; } catch (error) { print("‚ùå Insurance claims schema with embedded data - ERROR: " + error.message); errors.push("Lab9 claimsSchema: " + error.message); failedCommands++; }
totalCommands++; try { var result78 = db.lab9_policies.insertOne({_id: ObjectId(), policyNumber: "POL-AUTO-2024-5678", policyType: "Auto Insurance", carrier: "SafeGuard Insurance", coverageOptions: [{coverageCode: "COLL-500", coverageType: "Collision", deductible: 500, limit: 25000, premium: {monthly: 85, annual: 1020, discountApplied: 120}}], policyDetails: {effectiveDate: new Date("2024-01-01"), expirationDate: new Date("2024-12-31"), renewalType: "Auto-Renewal"}}); print("‚úÖ Policy schema with coverage options"); passedCommands++; } catch (error) { print("‚ùå Policy schema with coverage options - ERROR: " + error.message); errors.push("Lab9 policySchema: " + error.message); failedCommands++; }
totalCommands++; try { db.policyholders.drop(); var result79 = db.createCollection("policyholders", {validator: {$jsonSchema: {bsonType: "object", required: ["email", "licenseNumber", "createdAt"], properties: {email: {bsonType: "string", pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"}, licenseNumber: {bsonType: "string", minLength: 8, maxLength: 20}, age: {bsonType: "int", minimum: 16, maximum: 120}, communicationPreferences: {bsonType: "object", properties: {emailNotifications: {bsonType: "bool"}, smsAlerts: {bsonType: "bool"}}}}}}}); print("‚úÖ Schema validation with JSON Schema"); passedCommands++; } catch (error) { print("‚ùå Schema validation with JSON Schema - ERROR: " + error.message); errors.push("Lab9 validation: " + error.message); failedCommands++; }
totalCommands++; try { var result80 = db.policyholders.insertOne({email: "john.doe@example.com", licenseNumber: "DL1234567890", age: 35, communicationPreferences: {emailNotifications: true, smsAlerts: false}, createdAt: new Date()}); print("‚úÖ Valid document insertion test"); passedCommands++; } catch (error) { print("‚ùå Valid document insertion test - ERROR: " + error.message); errors.push("Lab9 validInsert: " + error.message); failedCommands++; }

// LAB 10: Transactions
print("\nüî¨ TESTING LAB 10: Transactions");
totalCommands++; try { var session = db.getMongo().startSession(); print("‚úÖ Start session for transactions"); passedCommands++; } catch (error) { print("‚ùå Start session for transactions - ERROR: " + error.message); errors.push("Lab10 session: " + error.message); failedCommands++; }
totalCommands++; try { if (typeof session !== 'undefined') { session.startTransaction({readConcern: {level: "majority"}, writeConcern: {w: "majority", wtimeout: 5000}}); var sessionDb = session.getDatabase("insurance_company"); print("‚úÖ Start transaction with read/write concerns"); passedCommands++; } else { throw new Error("Session not available"); } } catch (error) { print("‚ùå Start transaction with read/write concerns - ERROR: " + error.message); errors.push("Lab10 startTransaction: " + error.message); failedCommands++; }
totalCommands++; try { if (typeof session !== 'undefined' && typeof sessionDb !== 'undefined') { var customer = sessionDb.customers.findOne({}); var customerUpdate = sessionDb.customers.updateOne({customerId: customer.customerId}, {$inc: {policyCount: 1}}); var newPolicyResult = sessionDb.policies.insertOne({policyNumber: "TXN-" + new Date().getTime(), policyType: "Term Life", customerId: customer.customerId, annualPremium: NumberDecimal("600.00"), isActive: true}); session.commitTransaction(); session.endSession(); print("‚úÖ Basic transaction operations and commit"); passedCommands++; } else { throw new Error("Session or database not available"); } } catch (error) { print("‚ùå Basic transaction operations and commit - ERROR: " + error.message); errors.push("Lab10 basicTransaction: " + error.message); failedCommands++; }
totalCommands++; try { var session2 = db.getMongo().startSession(); session2.startTransaction(); var sessionDb2 = session2.getDatabase("insurance_company"); var customer = sessionDb2.customers.findOne({}); var claimResult = sessionDb2.claims.insertOne({claimNumber: "ROLLBACK-TEST-" + new Date().getTime(), customerId: customer.customerId, claimAmount: NumberDecimal("50000.00"), status: "Filed"}); session2.abortTransaction(); session2.endSession(); print("‚úÖ Transaction rollback test"); passedCommands++; } catch (error) { print("‚ùå Transaction rollback test - ERROR: " + error.message); errors.push("Lab10 rollback: " + error.message); failedCommands++; }
totalCommands++; try { var testClaim = db.claims.findOne({claimNumber: /ROLLBACK-TEST/}); if (!testClaim) { print("‚úÖ Rollback verification - no test claim found"); passedCommands++; } else { print("‚ùå Rollback verification - test claim found (rollback failed)"); errors.push("Lab10 rollbackVerify: rollback failed"); failedCommands++; } } catch (error) { print("‚ùå Rollback verification - ERROR: " + error.message); errors.push("Lab10 rollbackVerify: " + error.message); failedCommands++; }
totalCommands++; try { var session3 = db.getMongo().startSession(); session3.startTransaction({readConcern: {level: "majority"}, writeConcern: {w: "majority", wtimeout: 10000}}); var sessionDb3 = session3.getDatabase("insurance_company"); var customer = sessionDb3.customers.findOne({}); var policy = sessionDb3.policies.findOne({customerId: customer.customerId}); var newClaim = sessionDb3.claims.insertOne({claimNumber: "TXN-CLAIM-" + new Date().getTime(), customerId: customer.customerId, policyNumber: policy.policyNumber, claimAmount: NumberDecimal("5000.00"), status: "Under Review"}); sessionDb3.customers.updateOne({customerId: customer.customerId}, {$inc: {claimCount: 1}, $set: {lastClaimDate: new Date()}}); sessionDb3.policies.updateOne({policyNumber: policy.policyNumber}, {$set: {hasActiveClaims: true}}); sessionDb3.lab10_audit_logs.insertOne({action: "CLAIM_FILED", entityType: "claim", entityId: newClaim.insertedId, userId: "system", timestamp: new Date()}); session3.commitTransaction(); session3.endSession(); print("‚úÖ Multi-collection transaction"); passedCommands++; } catch (error) { print("‚ùå Multi-collection transaction - ERROR: " + error.message); errors.push("Lab10 multiCollection: " + error.message); failedCommands++; }
totalCommands++; try { db.claims.deleteMany({claimNumber: /TXN-/}); db.policies.deleteMany({policyNumber: /TXN-/}); db.lab10_audit_logs.deleteMany({action: "CLAIM_FILED", userId: "system"}); print("‚úÖ Transaction test data cleanup"); passedCommands++; } catch (error) { print("‚ùå Transaction test data cleanup - ERROR: " + error.message); errors.push("Lab10 cleanup: " + error.message); failedCommands++; }

// LAB 11: Replica Sets
print("\nüî¨ TESTING LAB 11: Replica Sets");
totalCommands++; try { var status = rs.status(); var primary = status.members.filter(function(m) { return m.state === 1; })[0]; if (primary) { print("‚úÖ Current primary identification"); passedCommands++; } else { throw new Error("No primary found"); } } catch (error) { print("‚ùå Current primary identification - ERROR: " + error.message); errors.push("Lab11 primaryId: " + error.message); failedCommands++; }
totalCommands++; try { var status = rs.status(); var config = rs.conf(); var member1 = status.members[0]; var member1Config = config.members[0]; var canVote = member1Config.votes > 0; var canBecomePrimary = member1Config.priority > 0; print("‚úÖ Member status and configuration analysis"); passedCommands++; } catch (error) { print("‚ùå Member status and configuration analysis - ERROR: " + error.message); errors.push("Lab11 memberAnalysis: " + error.message); failedCommands++; }
totalCommands++; try { var result = db.policies.updateOne({_id: {$exists: true}}, {$set: {lastReviewDate: new Date(), reviewedBy: "system"}}, {writeConcern: {w: "majority", j: true, wtimeout: 5000}}); if (result.acknowledged) { print("‚úÖ Majority write concern test"); passedCommands++; } else { throw new Error("Write not acknowledged"); } } catch (error) { print("‚ùå Majority write concern test - ERROR: " + error.message); errors.push("Lab11 writeConcern: " + error.message); failedCommands++; }
totalCommands++; try { var localCount = db.claims.countDocuments({status: {$exists: true}}, {readConcern: {level: "local"}}); var majorityCount = db.claims.countDocuments({status: {$exists: true}}, {readConcern: {level: "majority"}}); print("‚úÖ Read concern comparison test"); passedCommands++; } catch (error) { print("‚ùå Read concern comparison test - ERROR: " + error.message); errors.push("Lab11 readConcern: " + error.message); failedCommands++; }
totalCommands++; try { var status = rs.status(); var primary = status.members.find(function(m) { return m.state === 1; }); var secondaries = status.members.filter(function(m) { return m.state === 2; }); if (primary && secondaries.length > 0) { var lag = (primary.optimeDate - secondaries[0].optimeDate) / 1000; print("‚úÖ Replication lag analysis"); passedCommands++; } else { print("‚úÖ Replication lag analysis (no secondaries)"); passedCommands++; } } catch (error) { print("‚ùå Replication lag analysis - ERROR: " + error.message); errors.push("Lab11 repLag: " + error.message); failedCommands++; }
totalCommands++; try { var oplogStats = db.getSiblingDB("local").oplog.rs.stats(); var firstOp = db.getSiblingDB("local").oplog.rs.find().sort({ts: 1}).limit(1).next(); var lastOp = db.getSiblingDB("local").oplog.rs.find().sort({ts: -1}).limit(1).next(); var oplogWindow = (lastOp.ts.t - firstOp.ts.t) / 3600; print("‚úÖ Oplog monitoring and window calculation"); passedCommands++; } catch (error) { print("‚ùå Oplog monitoring and window calculation - ERROR: " + error.message); errors.push("Lab11 oplogMonitor: " + error.message); failedCommands++; }
totalCommands++; try { db = db.getSiblingDB("insurance_company"); var activePolicies = db.policies.countDocuments({status: "Active"}); var openClaims = db.claims.countDocuments({status: {$in: ["Filed", "Under Review"]}}); print("‚úÖ Insurance data volume monitoring"); passedCommands++; } catch (error) { print("‚ùå Insurance data volume monitoring - ERROR: " + error.message); errors.push("Lab11 dataVolume: " + error.message); failedCommands++; }

// LAB 12: Sharding Simulation
print("\nüî¨ TESTING LAB 12: Sharding Simulation");
totalCommands++; try { db = db.getSiblingDB('insurance_company'); var customersByState = db.customers.aggregate([{$group: {_id: "$address.state", count: {$sum: 1}}}, {$sort: {count: -1}}]).toArray(); print("‚úÖ Analyze customer distribution"); passedCommands++; } catch (error) { print("‚ùå Analyze customer distribution - ERROR: " + error.message); errors.push("Lab12 customerAnalysis: " + error.message); failedCommands++; }
totalCommands++; try { var policiesByType = db.policies.aggregate([{$group: {_id: "$policyType", count: {$sum: 1}}}, {$sort: {count: -1}}]).toArray(); print("‚úÖ Analyze policy distribution"); passedCommands++; } catch (error) { print("‚ùå Analyze policy distribution - ERROR: " + error.message); errors.push("Lab12 policyAnalysis: " + error.message); failedCommands++; }
totalCommands++; try { var totalDocs = db.customers.countDocuments(); var docsPerShard = Math.ceil(totalDocs / 3); print("‚úÖ Simulate shard distribution"); passedCommands++; } catch (error) { print("‚ùå Simulate shard distribution - ERROR: " + error.message); errors.push("Lab12 shardSimulation: " + error.message); failedCommands++; }

// LAB 13: Change Streams
print("\nüî¨ TESTING LAB 13: Change Streams");
totalCommands++; try { db.notifications.createIndex({ recipientId: 1, timestamp: -1 }); print("‚úÖ Create notifications index"); passedCommands++; } catch (error) { print("‚ùå Create notifications index - ERROR: " + error.message); errors.push("Lab13 notificationsIndex: " + error.message); failedCommands++; }
totalCommands++; try { db.activity_log.createIndex({ timestamp: -1 }); print("‚úÖ Create activity log index"); passedCommands++; } catch (error) { print("‚ùå Create activity log index - ERROR: " + error.message); errors.push("Lab13 activityIndex: " + error.message); failedCommands++; }
totalCommands++; try { var testClaim = {_id: "claim_cs_test1", claimNumber: "CLM-2024-CS001", customerId: "cust1", claimType: "Auto Accident", claimAmount: NumberDecimal("15000.00"), status: "Filed", incidentDate: new Date(), createdAt: new Date()}; db.claims.insertOne(testClaim); print("‚úÖ Insert test claim for change streams"); passedCommands++; } catch (error) { print("‚ùå Insert test claim for change streams - ERROR: " + error.message); errors.push("Lab13 testClaim: " + error.message); failedCommands++; }
totalCommands++; try { db.notifications.insertOne({ recipientId: "cust1", type: "claim_filed", priority: "medium", message: "Test notification", claimId: "claim_cs_test1", timestamp: new Date(), read: false, status: "active" }); print("‚úÖ Create test notification"); passedCommands++; } catch (error) { print("‚ùå Create test notification - ERROR: " + error.message); errors.push("Lab13 testNotification: " + error.message); failedCommands++; }
totalCommands++; try { var notifications = db.notifications.find({ claimId: "claim_cs_test1" }).toArray(); print("‚úÖ Query notifications by claim"); passedCommands++; } catch (error) { print("‚ùå Query notifications by claim - ERROR: " + error.message); errors.push("Lab13 queryNotifications: " + error.message); failedCommands++; }
totalCommands++; try { db.claims.updateOne({ _id: "claim_cs_test1" }, { $set: { status: "Under Review", reviewDate: new Date() } }); print("‚úÖ Update claim status"); passedCommands++; } catch (error) { print("‚ùå Update claim status - ERROR: " + error.message); errors.push("Lab13 updateClaim: " + error.message); failedCommands++; }
totalCommands++; try { db.activity_log.insertOne({ operation: "claim_processed", collection: "claims", documentId: "claim_cs_test1", timestamp: new Date(), userId: "system" }); print("‚úÖ Log activity"); passedCommands++; } catch (error) { print("‚ùå Log activity - ERROR: " + error.message); errors.push("Lab13 logActivity: " + error.message); failedCommands++; }
totalCommands++; try { var recentActivity = db.activity_log.find().sort({ timestamp: -1 }).limit(5).toArray(); print("‚úÖ Query recent activity"); passedCommands++; } catch (error) { print("‚ùå Query recent activity - ERROR: " + error.message); errors.push("Lab13 queryActivity: " + error.message); failedCommands++; }
totalCommands++; try { db.claims.deleteMany({ _id: "claim_cs_test1" }); db.notifications.deleteMany({ claimId: "claim_cs_test1" }); db.activity_log.deleteMany({ userId: "system" }); print("‚úÖ Cleanup test data"); passedCommands++; } catch (error) { print("‚ùå Cleanup test data - ERROR: " + error.message); errors.push("Lab13 cleanup: " + error.message); failedCommands++; }


// RESULTS
print("\n" + "=".repeat(80));
print("üìä COMPREHENSIVE TEST RESULTS SUMMARY");
print("=".repeat(80));
print("Total Commands Tested: " + totalCommands);
print("‚úÖ Passed: " + passedCommands);
print("‚ùå Failed: " + failedCommands);

print("\nüìã DETAILED ERROR REPORT:");
if (errors.length === 0) {
    print("üéâ NO ERRORS FOUND! All commands passed.");
} else {
    for (var i = 0; i < errors.length; i++) {
        print("\n" + (i + 1) + ". " + errors[i]);
    }
}

var passRate = (passedCommands / totalCommands * 100).toFixed(1);
print("\nüéØ FINAL ASSESSMENT:");
if (failedCommands === 0 && passRate == 100) {
    print("üü¢ COURSE READY: Labs are safe for student use");
} else {
    print("üî¥ COURSE NOT READY: Issues found that need fixing");
}
print("\nPass Rate: " + passRate + "%");
print("Test completed. Review all errors above before releasing to students.");