#!/usr/bin/env mongosh
print("üß™ COMPREHENSIVE LABS 1-12 VALIDATION - EVERY COMMAND"); print("=" .repeat(80)); var totalCommands = 0; var passedCommands = 0; var failedCommands = 0; var errors = []; try { load("data/comprehensive_data_loader.js"); print("‚úÖ Data loaded"); } catch (e) { print("‚ùå Data load failed: " + e.message); } db = db.getSiblingDB('insurance_company'); db.lab3_test_policies.drop(); db.lab3_test_customers.drop(); db.lab3_test_claims.drop(); print("‚úÖ Test collections cleaned"); print("\nüî¨ TESTING LAB 1: MongoDB Shell Mastery"); totalCommands++; try { var result1 = db.version(); print("‚úÖ MongoDB version"); passedCommands++; } catch (error) { print("‚ùå MongoDB version - ERROR: " + error.message); errors.push("Lab1 version: " + error.message); failedCommands++; } totalCommands++; try { var result2 = db.runCommand({buildInfo: 1}); print("‚úÖ Build info"); passedCommands++; } catch (error) { print("‚ùå Build info - ERROR: " + error.message); errors.push("Lab1 buildInfo: " + error.message); failedCommands++; } totalCommands++; try { var result3 = db; print("‚úÖ Current database"); passedCommands++; } catch (error) { print("‚ùå Current database - ERROR: " + error.message); errors.push("Lab1 db: " + error.message); failedCommands++; } totalCommands++; try { var result4 = db.serverStatus(); print("‚úÖ Server status"); passedCommands++; } catch (error) { print("‚ùå Server status - ERROR: " + error.message); errors.push("Lab1 serverStatus: " + error.message); failedCommands++; } totalCommands++; try { var result5 = db.runCommand({connectionStatus: 1}); print("‚úÖ Connection status"); passedCommands++; } catch (error) { print("‚ùå Connection status - ERROR: " + error.message); errors.push("Lab1 connectionStatus: " + error.message); failedCommands++; } totalCommands++; try { var result6 = db.adminCommand({listDatabases: 1}); print("‚úÖ List databases"); passedCommands++; } catch (error) { print("‚ùå List databases - ERROR: " + error.message); errors.push("Lab1 listDatabases: " + error.message); failedCommands++; } totalCommands++; try { var result7 = db.stats(); print("‚úÖ Database stats"); passedCommands++; } catch (error) { print("‚ùå Database stats - ERROR: " + error.message); errors.push("Lab1 stats: " + error.message); failedCommands++; } totalCommands++; try { var result8 = db.getName(); print("‚úÖ Database name"); passedCommands++; } catch (error) { print("‚ùå Database name - ERROR: " + error.message); errors.push("Lab1 getName: " + error.message); failedCommands++; } totalCommands++; try { db = db.getSiblingDB('insurance_company'); print("‚úÖ Switch to insurance_company"); passedCommands++; } catch (error) { print("‚ùå Switch to insurance_company - ERROR: " + error.message); errors.push("Lab1 use: " + error.message); failedCommands++; } totalCommands++; try { var result9 = db.runCommand("listCollections").cursor.firstBatch.map(c => c.name); print("‚úÖ List collections"); passedCommands++; } catch (error) { print("‚ùå List collections - ERROR: " + error.message); errors.push("Lab1 listCollections: " + error.message); failedCommands++; } totalCommands++; try { var result10 = db.createCollection("policies"); print("‚úÖ Create collection"); passedCommands++; } catch (error) { print("‚ùå Create collection - ERROR: " + error.message); errors.push("Lab1 createCollection: " + error.message); failedCommands++; } totalCommands++; try { var result11 = db.policies.getIndexes(); print("‚úÖ Get indexes"); passedCommands++; } catch (error) { print("‚ùå Get indexes - ERROR: " + error.message); errors.push("Lab1 getIndexes: " + error.message); failedCommands++; } totalCommands++; try { var result12 = db.runCommand({ping: 1}); print("‚úÖ Ping command"); passedCommands++; } catch (error) { print("‚ùå Ping command - ERROR: " + error.message); errors.push("Lab1 ping: " + error.message); failedCommands++; } totalCommands++; try { var result13 = db.getProfilingStatus(); print("‚úÖ Profiling status"); passedCommands++; } catch (error) { print("‚ùå Profiling status - ERROR: " + error.message); errors.push("Lab1 getProfilingStatus: " + error.message); failedCommands++; } totalCommands++; try { var result14 = db.currentOp(); print("‚úÖ Current operations"); passedCommands++; } catch (error) { print("‚ùå Current operations - ERROR: " + error.message); errors.push("Lab1 currentOp: " + error.message); failedCommands++; } print("\nüî¨ TESTING LAB 2: Database Management"); totalCommands++; try { var result15 = db.stats(); print("‚úÖ Database statistics"); passedCommands++; } catch (error) { print("‚ùå Database statistics - ERROR: " + error.message); errors.push("Lab2 stats: " + error.message); failedCommands++; } totalCommands++; try { var result16 = db.stats(1024); print("‚úÖ Database stats KB"); passedCommands++; } catch (error) { print("‚ùå Database stats KB - ERROR: " + error.message); errors.push("Lab2 stats KB: " + error.message); failedCommands++; } totalCommands++; try { var result17 = db.runCommand({dbStats: 1, scale: 1024}); print("‚úÖ DB stats command"); passedCommands++; } catch (error) { print("‚ùå DB stats command - ERROR: " + error.message); errors.push("Lab2 dbStats: " + error.message); failedCommands++; } totalCommands++; try { var result18 = db.createCollection("lab2_customers"); print("‚úÖ Create lab2 customers"); passedCommands++; } catch (error) { print("‚ùå Create lab2 customers - ERROR: " + error.message); errors.push("Lab2 createCollection: " + error.message); failedCommands++; } totalCommands++; try { var result19 = db.createCollection("audit_logs", {capped: true, size: 1000000, max: 5000}); print("‚úÖ Create capped collection"); passedCommands++; } catch (error) { print("‚ùå Create capped collection - ERROR: " + error.message); errors.push("Lab2 capped: " + error.message); failedCommands++; } totalCommands++; try { var result20 = db.customers.stats(); print("‚úÖ Collection stats"); passedCommands++; } catch (error) { print("‚ùå Collection stats - ERROR: " + error.message); errors.push("Lab2 collection stats: " + error.message); failedCommands++; } totalCommands++; try { var result21 = db.audit_logs.isCapped(); print("‚úÖ Check capped"); passedCommands++; } catch (error) { print("‚ùå Check capped - ERROR: " + error.message); errors.push("Lab2 isCapped: " + error.message); failedCommands++; } print("\nüî¨ TESTING LAB 3: CRUD Create/Insert"); totalCommands++; try { var result22 = db.lab3_test_policies.insertOne({policyNumber: "POL-AUTO-001", premiumAmount: 899.99, policyType: "Auto"}); print("‚úÖ Insert basic policy"); passedCommands++; } catch (error) { print("‚ùå Insert basic policy - ERROR: " + error.message); errors.push("Lab3 basic insertOne: " + error.message); failedCommands++; } totalCommands++; try { var result23 = db.lab3_test_policies.insertOne({_id: "POL-HOME-001", policyNumber: "POL-HOME-001", premiumAmount: 1299.99, policyType: "Home", insuranceCarrier: "SafeGuard Insurance"}); print("‚úÖ Insert with custom ID"); passedCommands++; } catch (error) { print("‚ùå Insert with custom ID - ERROR: " + error.message); errors.push("Lab3 custom ID: " + error.message); failedCommands++; } totalCommands++; try { var result24 = db.lab3_test_policies.insertOne({policyNumber: "POL-LIFE-001", premiumAmount: 2499.99, policyType: "Life", coverage: {deathBenefit: 500000, termLength: "20 years", cashValue: true}, beneficiaries: ["spouse", "children", "trust"], active: true, createdAt: new Date()}); print("‚úÖ Insert complex nested policy"); passedCommands++; } catch (error) { print("‚ùå Insert complex nested policy - ERROR: " + error.message); errors.push("Lab3 nested: " + error.message); failedCommands++; } totalCommands++; try { var newId = new ObjectId(); print("‚úÖ Generate ObjectId"); passedCommands++; } catch (error) { print("‚ùå Generate ObjectId - ERROR: " + error.message); errors.push("Lab3 ObjectId: " + error.message); failedCommands++; } totalCommands++; try { var customId = new ObjectId(); var result25 = db.lab3_test_policies.insertOne({_id: customId, policyType: "Commercial", policyNumber: "POL-COM-001", premiumAmount: 4999.99}); print("‚úÖ Insert with generated ObjectId"); passedCommands++; } catch (error) { print("‚ùå Insert with generated ObjectId - ERROR: " + error.message); errors.push("Lab3 generated ID: " + error.message); failedCommands++; } totalCommands++; try { var result26 = db.lab3_test_customers.insertMany([{customerId: "CUST-TEST-001", name: "John Doe", email: "john@example.com", age: 30, city: "New York", customerType: "Individual"}, {customerId: "CUST-TEST-002", name: "Jane Smith", email: "jane@example.com", age: 25, city: "Los Angeles", customerType: "Individual"}, {customerId: "CUST-TEST-003", name: "ABC Corporation", email: "contact@abccorp.com", businessType: "Manufacturing", city: "Chicago", customerType: "Business"}]); print("‚úÖ Insert many customers"); passedCommands++; } catch (error) { print("‚ùå Insert many customers - ERROR: " + error.message); errors.push("Lab3 insertMany: " + error.message); failedCommands++; } totalCommands++; try { var result27 = db.lab3_test_claims.insertMany([{claimNumber: "CLM-001", policyId: "POL-AUTO-001", claimAmount: 3500.00}, {claimNumber: "CLM-002", policyId: "POL-HOME-001", claimAmount: 8750.00}, {claimNumber: "CLM-003", policyId: "POL-AUTO-001", claimAmount: 1250.00}], {ordered: true}); print("‚úÖ Insert ordered claims"); passedCommands++; } catch (error) { print("‚ùå Insert ordered claims - ERROR: " + error.message); errors.push("Lab3 ordered: " + error.message); failedCommands++; } totalCommands++; try { var result28 = db.lab3_test_claims.insertMany([{claimNumber: "CLM-004", policyId: "POL-LIFE-001", claimAmount: 15000.00}, {claimNumber: "CLM-005", policyId: "POL-HOME-001", claimAmount: 4500.00}], {ordered: false}); print("‚úÖ Insert unordered claims"); passedCommands++; } catch (error) { print("‚ùå Insert unordered claims - ERROR: " + error.message); errors.push("Lab3 unordered: " + error.message); failedCommands++; } totalCommands++; try { var result29 = db.lab3_test_policies.insertOne({policyNumber: "POL-ACK-001", premiumAmount: 1599.99, policyType: "Auto"}, {writeConcern: {w: 1, j: true}}); print("‚úÖ Insert with write concern"); passedCommands++; } catch (error) { print("‚ùå Insert with write concern - ERROR: " + error.message); errors.push("Lab3 writeConcern: " + error.message); failedCommands++; } totalCommands++; try { var result30 = db.lab3_test_policies.insertMany([{policyNumber: "POL-BATCH-001", premiumAmount: 899.99, policyType: "Home"}, {policyNumber: "POL-BATCH-002", premiumAmount: 1199.99, policyType: "Auto"}], {writeConcern: {w: "majority"}}); print("‚úÖ Bulk insert with majority write concern"); passedCommands++; } catch (error) { print("‚ùå Bulk insert with majority write concern - ERROR: " + error.message); errors.push("Lab3 majority: " + error.message); failedCommands++; } totalCommands++; try { var result31 = db.lab3_test_policies.countDocuments(); print("‚úÖ Count documents after inserts"); passedCommands++; } catch (error) { print("‚ùå Count documents after inserts - ERROR: " + error.message); errors.push("Lab3 count: " + error.message); failedCommands++; } print("\nüî¨ TESTING LAB 4: CRUD Read/Query"); totalCommands++; try { var result25 = db.policies.find(); print("‚úÖ Find all policies"); passedCommands++; } catch (error) { print("‚ùå Find all policies - ERROR: " + error.message); errors.push("Lab4 find: " + error.message); failedCommands++; } totalCommands++; try { var result26 = db.policies.findOne(); print("‚úÖ Find one policy"); passedCommands++; } catch (error) { print("‚ùå Find one policy - ERROR: " + error.message); errors.push("Lab4 findOne: " + error.message); failedCommands++; } totalCommands++; try { var result27 = db.policies.find({policyType: "Auto"}); print("‚úÖ Find by type"); passedCommands++; } catch (error) { print("‚ùå Find by type - ERROR: " + error.message); errors.push("Lab4 filter: " + error.message); failedCommands++; } totalCommands++; try { var result28 = db.policies.find({premiumAmount: {$gt: 1000}}); print("‚úÖ Range query"); passedCommands++; } catch (error) { print("‚ùå Range query - ERROR: " + error.message); errors.push("Lab4 range: " + error.message); failedCommands++; } totalCommands++; try { var result29 = db.policies.find({}, {policyNumber: 1, premiumAmount: 1}); print("‚úÖ Projection query"); passedCommands++; } catch (error) { print("‚ùå Projection query - ERROR: " + error.message); errors.push("Lab4 projection: " + error.message); failedCommands++; } totalCommands++; try { var result30 = db.policies.find().sort({premiumAmount: -1}); print("‚úÖ Sort query"); passedCommands++; } catch (error) { print("‚ùå Sort query - ERROR: " + error.message); errors.push("Lab4 sort: " + error.message); failedCommands++; } totalCommands++; try { var result31 = db.policies.find().limit(5); print("‚úÖ Limit query"); passedCommands++; } catch (error) { print("‚ùå Limit query - ERROR: " + error.message); errors.push("Lab4 limit: " + error.message); failedCommands++; } totalCommands++; try { var result32 = db.policies.countDocuments(); print("‚úÖ Count documents"); passedCommands++; } catch (error) { print("‚ùå Count documents - ERROR: " + error.message); errors.push("Lab4 count: " + error.message); failedCommands++; } print("\nüî¨ TESTING LAB 5: CRUD Update/Delete"); totalCommands++; try { var result33 = db.policies.updateOne({policyNumber: "POL-AUTO-001"}, {$set: {premiumAmount: 949.99}}); print("‚úÖ Update one policy"); passedCommands++; } catch (error) { print("‚ùå Update one policy - ERROR: " + error.message); errors.push("Lab5 updateOne: " + error.message); failedCommands++; } totalCommands++; try { var result34 = db.policies.updateMany({policyType: "Auto"}, {$set: {featured: false}}); print("‚úÖ Update many policies"); passedCommands++; } catch (error) { print("‚ùå Update many policies - ERROR: " + error.message); errors.push("Lab5 updateMany: " + error.message); failedCommands++; } totalCommands++; try { var result35 = db.policies.updateOne({policyNumber: "POL-NEW-001"}, {$set: {customerName: "New Customer", premiumAmount: 1599.99}}, {upsert: true}); print("‚úÖ Upsert operation"); passedCommands++; } catch (error) { print("‚ùå Upsert operation - ERROR: " + error.message); errors.push("Lab5 upsert: " + error.message); failedCommands++; } totalCommands++; try { var result36 = db.policies.deleteOne({premiumAmount: {$lt: 100}}); print("‚úÖ Delete one policy"); passedCommands++; } catch (error) { print("‚ùå Delete one policy - ERROR: " + error.message); errors.push("Lab5 deleteOne: " + error.message); failedCommands++; } totalCommands++; try { var result37 = db.policies.deleteMany({policyType: "Discontinued", active: false}); print("‚úÖ Delete many policies"); passedCommands++; } catch (error) { print("‚ùå Delete many policies - ERROR: " + error.message); errors.push("Lab5 deleteMany: " + error.message); failedCommands++; } print("\nüî¨ TESTING LAB 6: Advanced Queries"); totalCommands++; try { db = db.getSiblingDB('insurance_analytics'); var result38 = db.claims.find({claimAmount: {$gte: 1000, $lte: 5000}}); print("‚úÖ Range query"); passedCommands++; } catch (error) { print("‚ùå Range query - ERROR: " + error.message); errors.push("Lab6 range: " + error.message); failedCommands++; } totalCommands++; try { var result39 = db.customers.find({tags: {$in: ["premium", "gold"]}}); print("‚úÖ Array query"); passedCommands++; } catch (error) { print("‚ùå Array query - ERROR: " + error.message); errors.push("Lab6 array: " + error.message); failedCommands++; } totalCommands++; try { var result40 = db.policies.find({policyNumber: /^POL/}); print("‚úÖ Regex query"); passedCommands++; } catch (error) { print("‚ùå Regex query - ERROR: " + error.message); errors.push("Lab6 regex: " + error.message); failedCommands++; } totalCommands++; try { var result41 = db.policies.find({coverage: {$exists: true}}); print("‚úÖ Exists query"); passedCommands++; } catch (error) { print("‚ùå Exists query - ERROR: " + error.message); errors.push("Lab6 exists: " + error.message); failedCommands++; } print("\nüî¨ TESTING LAB 7: Aggregation Framework"); totalCommands++; try { var result42 = db.claims.aggregate([{$group: {_id: "$policyType", total: {$sum: "$claimAmount"}}}]); print("‚úÖ Basic aggregation"); passedCommands++; } catch (error) { print("‚ùå Basic aggregation - ERROR: " + error.message); errors.push("Lab7 group: " + error.message); failedCommands++; } totalCommands++; try { var result43 = db.claims.aggregate([{$match: {claimAmount: {$gt: 1000}}}, {$group: {_id: "$customerId", count: {$sum: 1}}}]); print("‚úÖ Match and group"); passedCommands++; } catch (error) { print("‚ùå Match and group - ERROR: " + error.message); errors.push("Lab7 match-group: " + error.message); failedCommands++; } totalCommands++; try { var result44 = db.policies.aggregate([{$lookup: {from: "customers", localField: "customerId", foreignField: "_id", as: "customerInfo"}}]); print("‚úÖ Lookup operation"); passedCommands++; } catch (error) { print("‚ùå Lookup operation - ERROR: " + error.message); errors.push("Lab7 lookup: " + error.message); failedCommands++; } totalCommands++; try { var result45 = db.policies.aggregate([{$unwind: "$coverageTypes"}, {$group: {_id: "$coverageTypes", count: {$sum: 1}}}]); print("‚úÖ Unwind operation"); passedCommands++; } catch (error) { print("‚ùå Unwind operation - ERROR: " + error.message); errors.push("Lab7 unwind: " + error.message); failedCommands++; } print("\nüî¨ TESTING LAB 8: Indexing"); totalCommands++; try { db = db.getSiblingDB('insurance_company'); var result46 = db.customers.createIndex({email: 1}); print("‚úÖ Create index"); passedCommands++; } catch (error) { print("‚ùå Create index - ERROR: " + error.message); errors.push("Lab8 createIndex: " + error.message); failedCommands++; } totalCommands++; try { var result47 = db.customers.getIndexes(); print("‚úÖ List indexes"); passedCommands++; } catch (error) { print("‚ùå List indexes - ERROR: " + error.message); errors.push("Lab8 getIndexes: " + error.message); failedCommands++; } totalCommands++; try { var result48 = db.claims.createIndex({policyId: 1, status: 1, filedDate: -1}); print("‚úÖ Compound index"); passedCommands++; } catch (error) { print("‚ùå Compound index - ERROR: " + error.message); errors.push("Lab8 compound: " + error.message); failedCommands++; } totalCommands++; try { var result49 = db.policies.createIndex({policyType: "text", coverageDescription: "text"}); print("‚úÖ Text index"); passedCommands++; } catch (error) { print("‚ùå Text index - ERROR: " + error.message); errors.push("Lab8 text: " + error.message); failedCommands++; } print("\nüî¨ TESTING LAB 9: Data Modeling"); totalCommands++; try { var result50 = db.policies.insertOne({policyNumber: "TEST001", customer: {name: "Test", address: {street: "123 Main St"}}}); print("‚úÖ Embedded document"); passedCommands++; } catch (error) { print("‚ùå Embedded document - ERROR: " + error.message); errors.push("Lab9 embedded: " + error.message); failedCommands++; } print("\nüî¨ TESTING LAB 10: Transactions"); totalCommands++; try { var session = db.getMongo().startSession(); print("‚úÖ Start session"); passedCommands++; } catch (error) { print("‚ùå Start session - ERROR: " + error.message); errors.push("Lab10 session: " + error.message); failedCommands++; } totalCommands++; try { if (typeof session !== 'undefined') { session.startTransaction({readConcern: {level: "majority"}, writeConcern: {w: "majority", wtimeout: 5000}}); print("‚úÖ Start transaction"); passedCommands++; } else { throw new Error("Session not available"); } } catch (error) { print("‚ùå Start transaction - ERROR: " + error.message); errors.push("Lab10 startTransaction: " + error.message); failedCommands++; } totalCommands++; try { if (typeof session !== 'undefined') { var sessionDb = session.getDatabase("insurance_company"); var transResult = sessionDb.lab10_test_customers.insertOne({customerId: "TRANS-TEST-001", name: "Transaction Test"}); session.commitTransaction(); session.endSession(); print("‚úÖ Transaction operations"); passedCommands++; } else { throw new Error("Session not available"); } } catch (error) { print("‚ùå Transaction operations - ERROR: " + error.message); errors.push("Lab10 operations: " + error.message); failedCommands++; } print("\nüî¨ TESTING LAB 11: Replica Sets"); totalCommands++; try { var rsStatus = rs.status(); print("‚úÖ Replica set status"); passedCommands++; } catch (error) { print("‚ùå Replica set status - ERROR: " + error.message); errors.push("Lab11 rs.status: " + error.message); failedCommands++; } totalCommands++; try { var rsConfig = rs.conf(); print("‚úÖ Replica set config"); passedCommands++; } catch (error) { print("‚ùå Replica set config - ERROR: " + error.message); errors.push("Lab11 rs.conf: " + error.message); failedCommands++; } totalCommands++; try { var helloResult = db.hello(); print("‚úÖ Hello command"); passedCommands++; } catch (error) { print("‚ùå Hello command - ERROR: " + error.message); errors.push("Lab11 hello: " + error.message); failedCommands++; } totalCommands++; try { var replInfo = rs.printReplicationInfo(); print("‚úÖ Replication info"); passedCommands++; } catch (error) { print("‚ùå Replication info - ERROR: " + error.message); errors.push("Lab11 replInfo: " + error.message); failedCommands++; } print("\nüî¨ TESTING LAB 12: Sharding"); totalCommands++; try { var shardStatus = sh.status(); print("‚úÖ Sharding status"); passedCommands++; } catch (error) { print("‚ùå Sharding status - ERROR: " + error.message); errors.push("Lab12 sh.status: " + error.message); failedCommands++; } totalCommands++; try { var enableResult = sh.enableSharding("insurance_company"); print("‚úÖ Enable sharding"); passedCommands++; } catch (error) { print("‚ùå Enable sharding - ERROR: " + error.message); errors.push("Lab12 enableSharding: " + error.message); failedCommands++; } totalCommands++; try { var shardCollResult = sh.shardCollection("insurance_company.customers", {_id: "hashed"}); print("‚úÖ Shard collection"); passedCommands++; } catch (error) { print("‚ùå Shard collection - ERROR: " + error.message); errors.push("Lab12 shardCollection: " + error.message); failedCommands++; } print("\n" + "=".repeat(80)); print("üìä COMPREHENSIVE TEST RESULTS SUMMARY"); print("=".repeat(80)); print("Total Commands Tested: " + totalCommands); print("‚úÖ Passed: " + passedCommands); print("‚ùå Failed: " + failedCommands); print("\nüìã DETAILED ERROR REPORT:"); if (errors.length === 0) { print("üéâ NO ERRORS FOUND! All commands passed."); } else { for (var i = 0; i < errors.length; i++) { print("\n" + (i + 1) + ". " + errors[i]); } } var passRate = (passedCommands / totalCommands * 100).toFixed(1); print("\nüéØ FINAL ASSESSMENT:"); if (failedCommands === 0 && passRate == 100) { print("üü¢ COURSE READY: Labs are safe for student use"); } else { print("üî¥ COURSE NOT READY: Issues found that need fixing"); } print("\nPass Rate: " + passRate + "%"); print("Test completed. Review all errors above before releasing to students.");